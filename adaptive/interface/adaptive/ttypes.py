#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import adaptive.interface.constants.datatypes.ttypes
import adaptive.interface.constants.exceptions.ttypes
import adaptive.interface.ad_event.ttypes
import adaptive.interface.ad_data.ttypes
import adaptive.interface.biz_data.ttypes
import adaptive.interface.user_data.ttypes

from thrift.transport import TTransport
all_structs = []


class UserAdRequest(object):
    """
    Attributes:
     - uid
     - sysinfo
    """


    def __init__(self, uid=None, sysinfo=None,):
        self.uid = uid
        self.sysinfo = sysinfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sysinfo = adaptive.interface.user_data.ttypes.SystemInformation()
                    self.sysinfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserAdRequest')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.I32, 1)
            oprot.writeI32(self.uid)
            oprot.writeFieldEnd()
        if self.sysinfo is not None:
            oprot.writeFieldBegin('sysinfo', TType.STRUCT, 2)
            self.sysinfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserAdResponse(object):
    """
    Attributes:
     - timestamp
     - adReqId
     - adids
    """


    def __init__(self, timestamp=None, adReqId=None, adids=None,):
        self.timestamp = timestamp
        self.adReqId = adReqId
        self.adids = adids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.timestamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.adReqId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.adids = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = iprot.readI32()
                        self.adids[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserAdResponse')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I32, 1)
            oprot.writeI32(self.timestamp)
            oprot.writeFieldEnd()
        if self.adReqId is not None:
            oprot.writeFieldBegin('adReqId', TType.I32, 2)
            oprot.writeI32(self.adReqId)
            oprot.writeFieldEnd()
        if self.adids is not None:
            oprot.writeFieldBegin('adids', TType.MAP, 3)
            oprot.writeMapBegin(TType.I32, TType.I32, len(self.adids))
            for kiter7, viter8 in self.adids.items():
                oprot.writeI32(kiter7)
                oprot.writeI32(viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BizAdRequest(object):
    """
    Attributes:
     - bizid
     - ad_info
     - daily_budget
     - lifetime_days
    """


    def __init__(self, bizid=None, ad_info=None, daily_budget=None, lifetime_days=None,):
        self.bizid = bizid
        self.ad_info = ad_info
        self.daily_budget = daily_budget
        self.lifetime_days = lifetime_days

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.bizid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ad_info = adaptive.interface.ad_data.ttypes.AdCreation()
                    self.ad_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.daily_budget = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.lifetime_days = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BizAdRequest')
        if self.bizid is not None:
            oprot.writeFieldBegin('bizid', TType.I32, 1)
            oprot.writeI32(self.bizid)
            oprot.writeFieldEnd()
        if self.ad_info is not None:
            oprot.writeFieldBegin('ad_info', TType.STRUCT, 2)
            self.ad_info.write(oprot)
            oprot.writeFieldEnd()
        if self.daily_budget is not None:
            oprot.writeFieldBegin('daily_budget', TType.DOUBLE, 3)
            oprot.writeDouble(self.daily_budget)
            oprot.writeFieldEnd()
        if self.lifetime_days is not None:
            oprot.writeFieldBegin('lifetime_days', TType.I32, 4)
            oprot.writeI32(self.lifetime_days)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BizAdResponse(object):
    """
    Attributes:
     - timestamp
     - adid
    """


    def __init__(self, timestamp=None, adid=None,):
        self.timestamp = timestamp
        self.adid = adid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.timestamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.adid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BizAdResponse')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I32, 1)
            oprot.writeI32(self.timestamp)
            oprot.writeFieldEnd()
        if self.adid is not None:
            oprot.writeFieldBegin('adid', TType.I32, 2)
            oprot.writeI32(self.adid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UserAdRequest)
UserAdRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uid', None, None, ),  # 1
    (2, TType.STRUCT, 'sysinfo', [adaptive.interface.user_data.ttypes.SystemInformation, None], None, ),  # 2
)
all_structs.append(UserAdResponse)
UserAdResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'timestamp', None, None, ),  # 1
    (2, TType.I32, 'adReqId', None, None, ),  # 2
    (3, TType.MAP, 'adids', (TType.I32, None, TType.I32, None, False), None, ),  # 3
)
all_structs.append(BizAdRequest)
BizAdRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'bizid', None, None, ),  # 1
    (2, TType.STRUCT, 'ad_info', [adaptive.interface.ad_data.ttypes.AdCreation, None], None, ),  # 2
    (3, TType.DOUBLE, 'daily_budget', None, None, ),  # 3
    (4, TType.I32, 'lifetime_days', None, None, ),  # 4
)
all_structs.append(BizAdResponse)
BizAdResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'timestamp', None, None, ),  # 1
    (2, TType.I32, 'adid', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
