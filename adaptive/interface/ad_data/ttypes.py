#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import adaptive.interface.constants.user_attributes.ttypes

from thrift.transport import TTransport
all_structs = []


class AdObjectiveType(object):
    UNKNOWN = 0
    IMPRESSION = 1
    CLICK = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "IMPRESSION",
        2: "CLICK",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "IMPRESSION": 1,
        "CLICK": 2,
    }


class AdCategory(object):
    UNKNOWN = 0
    BRAND = 1
    GAMES = 2
    TRAVEL = 3
    ECOMMERCE = 4
    MEDIA = 5

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "BRAND",
        2: "GAMES",
        3: "TRAVEL",
        4: "ECOMMERCE",
        5: "MEDIA",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "BRAND": 1,
        "GAMES": 2,
        "TRAVEL": 3,
        "ECOMMERCE": 4,
        "MEDIA": 5,
    }


class AdTargeting(object):
    """
    Attributes:
     - gender
     - device_type
    """


    def __init__(self, gender=None, device_type=None,):
        self.gender = gender
        self.device_type = device_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.gender = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.device_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdTargeting')
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.I32, 1)
            oprot.writeI32(self.gender)
            oprot.writeFieldEnd()
        if self.device_type is not None:
            oprot.writeFieldBegin('device_type', TType.I32, 2)
            oprot.writeI32(self.device_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdCreation(object):
    """
    Attributes:
     - targeting
     - objective
     - category
     - max_bid
    """


    def __init__(self, targeting=None, objective=None, category=None, max_bid=-1,):
        self.targeting = targeting
        self.objective = objective
        self.category = category
        self.max_bid = max_bid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.targeting = AdTargeting()
                    self.targeting.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.objective = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.category = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.max_bid = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdCreation')
        if self.targeting is not None:
            oprot.writeFieldBegin('targeting', TType.STRUCT, 1)
            self.targeting.write(oprot)
            oprot.writeFieldEnd()
        if self.objective is not None:
            oprot.writeFieldBegin('objective', TType.I32, 2)
            oprot.writeI32(self.objective)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.I32, 3)
            oprot.writeI32(self.category)
            oprot.writeFieldEnd()
        if self.max_bid is not None:
            oprot.writeFieldBegin('max_bid', TType.DOUBLE, 4)
            oprot.writeDouble(self.max_bid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AdTargeting)
AdTargeting.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'gender', None, None, ),  # 1
    (2, TType.I32, 'device_type', None, None, ),  # 2
)
all_structs.append(AdCreation)
AdCreation.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'targeting', [AdTargeting, None], None, ),  # 1
    (2, TType.I32, 'objective', None, None, ),  # 2
    (3, TType.I32, 'category', None, None, ),  # 3
    (4, TType.DOUBLE, 'max_bid', None, -1, ),  # 4
)
fix_spec(all_structs)
del all_structs
