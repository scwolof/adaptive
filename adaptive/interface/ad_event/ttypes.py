#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import adaptive.interface.constants.datatypes.ttypes

from thrift.transport import TTransport
all_structs = []


class AdEventType(object):
    UNKNOWN = 0
    IMPRESSION = 1
    CLICK = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "IMPRESSION",
        2: "CLICK",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "IMPRESSION": 1,
        "CLICK": 2,
    }


class AdEvent(object):
    """
    Attributes:
     - timestamp
     - uid
     - adid
     - adReqId
     - eventType
    """


    def __init__(self, timestamp=None, uid=None, adid=None, adReqId=None, eventType=0,):
        self.timestamp = timestamp
        self.uid = uid
        self.adid = adid
        self.adReqId = adReqId
        self.eventType = eventType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.timestamp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.uid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.adid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.adReqId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.eventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdEvent')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I32, 1)
            oprot.writeI32(self.timestamp)
            oprot.writeFieldEnd()
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.I32, 2)
            oprot.writeI32(self.uid)
            oprot.writeFieldEnd()
        if self.adid is not None:
            oprot.writeFieldBegin('adid', TType.I32, 3)
            oprot.writeI32(self.adid)
            oprot.writeFieldEnd()
        if self.adReqId is not None:
            oprot.writeFieldBegin('adReqId', TType.I32, 4)
            oprot.writeI32(self.adReqId)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 5)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AdEvent)
AdEvent.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'timestamp', None, None, ),  # 1
    (2, TType.I32, 'uid', None, None, ),  # 2
    (3, TType.I32, 'adid', None, None, ),  # 3
    (4, TType.I32, 'adReqId', None, None, ),  # 4
    (5, TType.I32, 'eventType', None, 0, ),  # 5
)
fix_spec(all_structs)
del all_structs
