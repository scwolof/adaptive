/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ad_data_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interface { namespace ad_data {

int _kAdObjectiveTypeValues[] = {
  AdObjectiveType::UNKNOWN,
  AdObjectiveType::IMPRESSION,
  AdObjectiveType::CLICK
};
const char* _kAdObjectiveTypeNames[] = {
  "UNKNOWN",
  "IMPRESSION",
  "CLICK"
};
const std::map<int, const char*> _AdObjectiveType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAdObjectiveTypeValues, _kAdObjectiveTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AdObjectiveType::type& val) {
  std::map<int, const char*>::const_iterator it = _AdObjectiveType_VALUES_TO_NAMES.find(val);
  if (it != _AdObjectiveType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kAdCategoryValues[] = {
  AdCategory::UNKNOWN,
  AdCategory::BRAND,
  AdCategory::GAMES,
  AdCategory::TRAVEL,
  AdCategory::ECOMMERCE,
  AdCategory::MEDIA
};
const char* _kAdCategoryNames[] = {
  "UNKNOWN",
  "BRAND",
  "GAMES",
  "TRAVEL",
  "ECOMMERCE",
  "MEDIA"
};
const std::map<int, const char*> _AdCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kAdCategoryValues, _kAdCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AdCategory::type& val) {
  std::map<int, const char*>::const_iterator it = _AdCategory_VALUES_TO_NAMES.find(val);
  if (it != _AdCategory_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


AdTargeting::~AdTargeting() throw() {
}


void AdTargeting::__set_gender(const  ::interface::constants::user_attributes::Gender::type val) {
  this->gender = val;
}

void AdTargeting::__set_device_type(const  ::interface::constants::user_attributes::DeviceType::type val) {
  this->device_type = val;
}
std::ostream& operator<<(std::ostream& out, const AdTargeting& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdTargeting::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->gender = ( ::interface::constants::user_attributes::Gender::type)ecast0;
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->device_type = ( ::interface::constants::user_attributes::DeviceType::type)ecast1;
          this->__isset.device_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdTargeting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdTargeting");

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->device_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdTargeting &a, AdTargeting &b) {
  using ::std::swap;
  swap(a.gender, b.gender);
  swap(a.device_type, b.device_type);
  swap(a.__isset, b.__isset);
}

AdTargeting::AdTargeting(const AdTargeting& other2) {
  gender = other2.gender;
  device_type = other2.device_type;
  __isset = other2.__isset;
}
AdTargeting& AdTargeting::operator=(const AdTargeting& other3) {
  gender = other3.gender;
  device_type = other3.device_type;
  __isset = other3.__isset;
  return *this;
}
void AdTargeting::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdTargeting(";
  out << "gender=" << to_string(gender);
  out << ", " << "device_type=" << to_string(device_type);
  out << ")";
}


AdCreation::~AdCreation() throw() {
}


void AdCreation::__set_targeting(const AdTargeting& val) {
  this->targeting = val;
}

void AdCreation::__set_objective(const AdObjectiveType::type val) {
  this->objective = val;
}

void AdCreation::__set_category(const AdCategory::type val) {
  this->category = val;
}

void AdCreation::__set_max_bid(const double val) {
  this->max_bid = val;
}
std::ostream& operator<<(std::ostream& out, const AdCreation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdCreation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->targeting.read(iprot);
          this->__isset.targeting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->objective = (AdObjectiveType::type)ecast4;
          this->__isset.objective = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->category = (AdCategory::type)ecast5;
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_bid);
          this->__isset.max_bid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdCreation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdCreation");

  xfer += oprot->writeFieldBegin("targeting", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->targeting.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objective", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->objective);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_bid", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->max_bid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdCreation &a, AdCreation &b) {
  using ::std::swap;
  swap(a.targeting, b.targeting);
  swap(a.objective, b.objective);
  swap(a.category, b.category);
  swap(a.max_bid, b.max_bid);
  swap(a.__isset, b.__isset);
}

AdCreation::AdCreation(const AdCreation& other6) {
  targeting = other6.targeting;
  objective = other6.objective;
  category = other6.category;
  max_bid = other6.max_bid;
  __isset = other6.__isset;
}
AdCreation& AdCreation::operator=(const AdCreation& other7) {
  targeting = other7.targeting;
  objective = other7.objective;
  category = other7.category;
  max_bid = other7.max_bid;
  __isset = other7.__isset;
  return *this;
}
void AdCreation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdCreation(";
  out << "targeting=" << to_string(targeting);
  out << ", " << "objective=" << to_string(objective);
  out << ", " << "category=" << to_string(category);
  out << ", " << "max_bid=" << to_string(max_bid);
  out << ")";
}

}} // namespace
