/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ad_data_TYPES_H
#define ad_data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "user_attributes_types.h"


namespace interface { namespace ad_data {

struct AdObjectiveType {
  enum type {
    UNKNOWN = 0,
    IMPRESSION = 1,
    CLICK = 2
  };
};

extern const std::map<int, const char*> _AdObjectiveType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AdObjectiveType::type& val);

struct AdCategory {
  enum type {
    UNKNOWN = 0,
    BRAND = 1,
    GAMES = 2,
    TRAVEL = 3,
    ECOMMERCE = 4,
    MEDIA = 5
  };
};

extern const std::map<int, const char*> _AdCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AdCategory::type& val);

class AdTargeting;

class AdCreation;

typedef struct _AdTargeting__isset {
  _AdTargeting__isset() : gender(false), device_type(false) {}
  bool gender :1;
  bool device_type :1;
} _AdTargeting__isset;

class AdTargeting : public virtual ::apache::thrift::TBase {
 public:

  AdTargeting(const AdTargeting&);
  AdTargeting& operator=(const AdTargeting&);
  AdTargeting() : gender(( ::interface::constants::user_attributes::Gender::type)0), device_type(( ::interface::constants::user_attributes::DeviceType::type)0) {
  }

  virtual ~AdTargeting() throw();
   ::interface::constants::user_attributes::Gender::type gender;
   ::interface::constants::user_attributes::DeviceType::type device_type;

  _AdTargeting__isset __isset;

  void __set_gender(const  ::interface::constants::user_attributes::Gender::type val);

  void __set_device_type(const  ::interface::constants::user_attributes::DeviceType::type val);

  bool operator == (const AdTargeting & rhs) const
  {
    if (!(gender == rhs.gender))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const AdTargeting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdTargeting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdTargeting &a, AdTargeting &b);

std::ostream& operator<<(std::ostream& out, const AdTargeting& obj);

typedef struct _AdCreation__isset {
  _AdCreation__isset() : targeting(false), objective(false), category(false), max_bid(true) {}
  bool targeting :1;
  bool objective :1;
  bool category :1;
  bool max_bid :1;
} _AdCreation__isset;

class AdCreation : public virtual ::apache::thrift::TBase {
 public:

  AdCreation(const AdCreation&);
  AdCreation& operator=(const AdCreation&);
  AdCreation() : objective((AdObjectiveType::type)0), category((AdCategory::type)0), max_bid(-1) {
  }

  virtual ~AdCreation() throw();
  AdTargeting targeting;
  AdObjectiveType::type objective;
  AdCategory::type category;
  double max_bid;

  _AdCreation__isset __isset;

  void __set_targeting(const AdTargeting& val);

  void __set_objective(const AdObjectiveType::type val);

  void __set_category(const AdCategory::type val);

  void __set_max_bid(const double val);

  bool operator == (const AdCreation & rhs) const
  {
    if (!(targeting == rhs.targeting))
      return false;
    if (!(objective == rhs.objective))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(max_bid == rhs.max_bid))
      return false;
    return true;
  }
  bool operator != (const AdCreation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdCreation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdCreation &a, AdCreation &b);

std::ostream& operator<<(std::ostream& out, const AdCreation& obj);

}} // namespace

#endif
