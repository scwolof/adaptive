/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Adaptive_TYPES_H
#define Adaptive_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "datatypes_types.h"
#include "exceptions_types.h"
#include "ad_event_types.h"
#include "ad_data_types.h"
#include "biz_data_types.h"
#include "user_data_types.h"


namespace interface { namespace adaptive {

class UserAdRequest;

class UserAdResponse;

class BizAdRequest;

class BizAdResponse;

typedef struct _UserAdRequest__isset {
  _UserAdRequest__isset() : uid(false), sysinfo(false) {}
  bool uid :1;
  bool sysinfo :1;
} _UserAdRequest__isset;

class UserAdRequest : public virtual ::apache::thrift::TBase {
 public:

  UserAdRequest(const UserAdRequest&);
  UserAdRequest& operator=(const UserAdRequest&);
  UserAdRequest() : uid(0) {
  }

  virtual ~UserAdRequest() throw();
   ::interface::constants::datatypes::UserID uid;
   ::interface::user_data::SystemInformation sysinfo;

  _UserAdRequest__isset __isset;

  void __set_uid(const  ::interface::constants::datatypes::UserID val);

  void __set_sysinfo(const  ::interface::user_data::SystemInformation& val);

  bool operator == (const UserAdRequest & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(sysinfo == rhs.sysinfo))
      return false;
    return true;
  }
  bool operator != (const UserAdRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAdRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAdRequest &a, UserAdRequest &b);

std::ostream& operator<<(std::ostream& out, const UserAdRequest& obj);

typedef struct _UserAdResponse__isset {
  _UserAdResponse__isset() : timestamp(false), adReqId(false), adids(false) {}
  bool timestamp :1;
  bool adReqId :1;
  bool adids :1;
} _UserAdResponse__isset;

class UserAdResponse : public virtual ::apache::thrift::TBase {
 public:

  UserAdResponse(const UserAdResponse&);
  UserAdResponse& operator=(const UserAdResponse&);
  UserAdResponse() : timestamp(0), adReqId(0) {
  }

  virtual ~UserAdResponse() throw();
   ::interface::constants::datatypes::Timestamp timestamp;
   ::interface::constants::datatypes::AdReqID adReqId;
  std::map< ::interface::constants::datatypes::AdPosition,  ::interface::constants::datatypes::AdID>  adids;

  _UserAdResponse__isset __isset;

  void __set_timestamp(const  ::interface::constants::datatypes::Timestamp val);

  void __set_adReqId(const  ::interface::constants::datatypes::AdReqID val);

  void __set_adids(const std::map< ::interface::constants::datatypes::AdPosition,  ::interface::constants::datatypes::AdID> & val);

  bool operator == (const UserAdResponse & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(adReqId == rhs.adReqId))
      return false;
    if (!(adids == rhs.adids))
      return false;
    return true;
  }
  bool operator != (const UserAdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAdResponse &a, UserAdResponse &b);

std::ostream& operator<<(std::ostream& out, const UserAdResponse& obj);

typedef struct _BizAdRequest__isset {
  _BizAdRequest__isset() : bizid(false), ad_info(false), daily_budget(false), lifetime_days(false) {}
  bool bizid :1;
  bool ad_info :1;
  bool daily_budget :1;
  bool lifetime_days :1;
} _BizAdRequest__isset;

class BizAdRequest : public virtual ::apache::thrift::TBase {
 public:

  BizAdRequest(const BizAdRequest&);
  BizAdRequest& operator=(const BizAdRequest&);
  BizAdRequest() : bizid(0), daily_budget(0), lifetime_days(0) {
  }

  virtual ~BizAdRequest() throw();
   ::interface::constants::datatypes::BizID bizid;
   ::interface::ad_data::AdCreation ad_info;
  double daily_budget;
   ::interface::constants::datatypes::adaptive_int lifetime_days;

  _BizAdRequest__isset __isset;

  void __set_bizid(const  ::interface::constants::datatypes::BizID val);

  void __set_ad_info(const  ::interface::ad_data::AdCreation& val);

  void __set_daily_budget(const double val);

  void __set_lifetime_days(const  ::interface::constants::datatypes::adaptive_int val);

  bool operator == (const BizAdRequest & rhs) const
  {
    if (!(bizid == rhs.bizid))
      return false;
    if (!(ad_info == rhs.ad_info))
      return false;
    if (!(daily_budget == rhs.daily_budget))
      return false;
    if (!(lifetime_days == rhs.lifetime_days))
      return false;
    return true;
  }
  bool operator != (const BizAdRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BizAdRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BizAdRequest &a, BizAdRequest &b);

std::ostream& operator<<(std::ostream& out, const BizAdRequest& obj);

typedef struct _BizAdResponse__isset {
  _BizAdResponse__isset() : timestamp(false), adid(false) {}
  bool timestamp :1;
  bool adid :1;
} _BizAdResponse__isset;

class BizAdResponse : public virtual ::apache::thrift::TBase {
 public:

  BizAdResponse(const BizAdResponse&);
  BizAdResponse& operator=(const BizAdResponse&);
  BizAdResponse() : timestamp(0), adid(0) {
  }

  virtual ~BizAdResponse() throw();
   ::interface::constants::datatypes::Timestamp timestamp;
   ::interface::constants::datatypes::AdID adid;

  _BizAdResponse__isset __isset;

  void __set_timestamp(const  ::interface::constants::datatypes::Timestamp val);

  void __set_adid(const  ::interface::constants::datatypes::AdID val);

  bool operator == (const BizAdResponse & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(adid == rhs.adid))
      return false;
    return true;
  }
  bool operator != (const BizAdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BizAdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BizAdResponse &a, BizAdResponse &b);

std::ostream& operator<<(std::ostream& out, const BizAdResponse& obj);

}} // namespace

#endif
