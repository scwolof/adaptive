/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Adaptive_H
#define Adaptive_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Adaptive_types.h"

namespace interface { namespace adaptive {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AdaptiveIf {
 public:
  virtual ~AdaptiveIf() {}
  virtual  ::interface::constants::datatypes::UserID createUserAccount(const  ::interface::user_data::UserAccountCreation& userData) = 0;
  virtual void user_request(UserAdResponse& _return, const UserAdRequest& reqData) = 0;
  virtual  ::interface::constants::datatypes::BizID createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData) = 0;
  virtual void biz_request(BizAdResponse& _return, const BizAdRequest& reqData) = 0;
  virtual void registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent) = 0;
};

class AdaptiveIfFactory {
 public:
  typedef AdaptiveIf Handler;

  virtual ~AdaptiveIfFactory() {}

  virtual AdaptiveIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdaptiveIf* /* handler */) = 0;
};

class AdaptiveIfSingletonFactory : virtual public AdaptiveIfFactory {
 public:
  AdaptiveIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<AdaptiveIf>& iface) : iface_(iface) {}
  virtual ~AdaptiveIfSingletonFactory() {}

  virtual AdaptiveIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdaptiveIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<AdaptiveIf> iface_;
};

class AdaptiveNull : virtual public AdaptiveIf {
 public:
  virtual ~AdaptiveNull() {}
   ::interface::constants::datatypes::UserID createUserAccount(const  ::interface::user_data::UserAccountCreation& /* userData */) {
     ::interface::constants::datatypes::UserID _return = 0;
    return _return;
  }
  void user_request(UserAdResponse& /* _return */, const UserAdRequest& /* reqData */) {
    return;
  }
   ::interface::constants::datatypes::BizID createBizAccount(const  ::interface::biz_data::BizAccountCreation& /* bizData */) {
     ::interface::constants::datatypes::BizID _return = 0;
    return _return;
  }
  void biz_request(BizAdResponse& /* _return */, const BizAdRequest& /* reqData */) {
    return;
  }
  void registerAdEvent(const  ::interface::ad_event::AdEvent& /* adEvent */) {
    return;
  }
};

typedef struct _Adaptive_createUserAccount_args__isset {
  _Adaptive_createUserAccount_args__isset() : userData(false) {}
  bool userData :1;
} _Adaptive_createUserAccount_args__isset;

class Adaptive_createUserAccount_args {
 public:

  Adaptive_createUserAccount_args(const Adaptive_createUserAccount_args&);
  Adaptive_createUserAccount_args& operator=(const Adaptive_createUserAccount_args&);
  Adaptive_createUserAccount_args() {
  }

  virtual ~Adaptive_createUserAccount_args() throw();
   ::interface::user_data::UserAccountCreation userData;

  _Adaptive_createUserAccount_args__isset __isset;

  void __set_userData(const  ::interface::user_data::UserAccountCreation& val);

  bool operator == (const Adaptive_createUserAccount_args & rhs) const
  {
    if (!(userData == rhs.userData))
      return false;
    return true;
  }
  bool operator != (const Adaptive_createUserAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_createUserAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Adaptive_createUserAccount_pargs {
 public:


  virtual ~Adaptive_createUserAccount_pargs() throw();
  const  ::interface::user_data::UserAccountCreation* userData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_createUserAccount_result__isset {
  _Adaptive_createUserAccount_result__isset() : success(false) {}
  bool success :1;
} _Adaptive_createUserAccount_result__isset;

class Adaptive_createUserAccount_result {
 public:

  Adaptive_createUserAccount_result(const Adaptive_createUserAccount_result&);
  Adaptive_createUserAccount_result& operator=(const Adaptive_createUserAccount_result&);
  Adaptive_createUserAccount_result() : success(0) {
  }

  virtual ~Adaptive_createUserAccount_result() throw();
   ::interface::constants::datatypes::UserID success;

  _Adaptive_createUserAccount_result__isset __isset;

  void __set_success(const  ::interface::constants::datatypes::UserID val);

  bool operator == (const Adaptive_createUserAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Adaptive_createUserAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_createUserAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_createUserAccount_presult__isset {
  _Adaptive_createUserAccount_presult__isset() : success(false) {}
  bool success :1;
} _Adaptive_createUserAccount_presult__isset;

class Adaptive_createUserAccount_presult {
 public:


  virtual ~Adaptive_createUserAccount_presult() throw();
   ::interface::constants::datatypes::UserID* success;

  _Adaptive_createUserAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Adaptive_user_request_args__isset {
  _Adaptive_user_request_args__isset() : reqData(false) {}
  bool reqData :1;
} _Adaptive_user_request_args__isset;

class Adaptive_user_request_args {
 public:

  Adaptive_user_request_args(const Adaptive_user_request_args&);
  Adaptive_user_request_args& operator=(const Adaptive_user_request_args&);
  Adaptive_user_request_args() {
  }

  virtual ~Adaptive_user_request_args() throw();
  UserAdRequest reqData;

  _Adaptive_user_request_args__isset __isset;

  void __set_reqData(const UserAdRequest& val);

  bool operator == (const Adaptive_user_request_args & rhs) const
  {
    if (!(reqData == rhs.reqData))
      return false;
    return true;
  }
  bool operator != (const Adaptive_user_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_user_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Adaptive_user_request_pargs {
 public:


  virtual ~Adaptive_user_request_pargs() throw();
  const UserAdRequest* reqData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_user_request_result__isset {
  _Adaptive_user_request_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Adaptive_user_request_result__isset;

class Adaptive_user_request_result {
 public:

  Adaptive_user_request_result(const Adaptive_user_request_result&);
  Adaptive_user_request_result& operator=(const Adaptive_user_request_result&);
  Adaptive_user_request_result() {
  }

  virtual ~Adaptive_user_request_result() throw();
  UserAdResponse success;
   ::interface::constants::error_codes::ServerException error;

  _Adaptive_user_request_result__isset __isset;

  void __set_success(const UserAdResponse& val);

  void __set_error(const  ::interface::constants::error_codes::ServerException& val);

  bool operator == (const Adaptive_user_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Adaptive_user_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_user_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_user_request_presult__isset {
  _Adaptive_user_request_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Adaptive_user_request_presult__isset;

class Adaptive_user_request_presult {
 public:


  virtual ~Adaptive_user_request_presult() throw();
  UserAdResponse* success;
   ::interface::constants::error_codes::ServerException error;

  _Adaptive_user_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Adaptive_createBizAccount_args__isset {
  _Adaptive_createBizAccount_args__isset() : bizData(false) {}
  bool bizData :1;
} _Adaptive_createBizAccount_args__isset;

class Adaptive_createBizAccount_args {
 public:

  Adaptive_createBizAccount_args(const Adaptive_createBizAccount_args&);
  Adaptive_createBizAccount_args& operator=(const Adaptive_createBizAccount_args&);
  Adaptive_createBizAccount_args() {
  }

  virtual ~Adaptive_createBizAccount_args() throw();
   ::interface::biz_data::BizAccountCreation bizData;

  _Adaptive_createBizAccount_args__isset __isset;

  void __set_bizData(const  ::interface::biz_data::BizAccountCreation& val);

  bool operator == (const Adaptive_createBizAccount_args & rhs) const
  {
    if (!(bizData == rhs.bizData))
      return false;
    return true;
  }
  bool operator != (const Adaptive_createBizAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_createBizAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Adaptive_createBizAccount_pargs {
 public:


  virtual ~Adaptive_createBizAccount_pargs() throw();
  const  ::interface::biz_data::BizAccountCreation* bizData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_createBizAccount_result__isset {
  _Adaptive_createBizAccount_result__isset() : success(false) {}
  bool success :1;
} _Adaptive_createBizAccount_result__isset;

class Adaptive_createBizAccount_result {
 public:

  Adaptive_createBizAccount_result(const Adaptive_createBizAccount_result&);
  Adaptive_createBizAccount_result& operator=(const Adaptive_createBizAccount_result&);
  Adaptive_createBizAccount_result() : success(0) {
  }

  virtual ~Adaptive_createBizAccount_result() throw();
   ::interface::constants::datatypes::BizID success;

  _Adaptive_createBizAccount_result__isset __isset;

  void __set_success(const  ::interface::constants::datatypes::BizID val);

  bool operator == (const Adaptive_createBizAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Adaptive_createBizAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_createBizAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_createBizAccount_presult__isset {
  _Adaptive_createBizAccount_presult__isset() : success(false) {}
  bool success :1;
} _Adaptive_createBizAccount_presult__isset;

class Adaptive_createBizAccount_presult {
 public:


  virtual ~Adaptive_createBizAccount_presult() throw();
   ::interface::constants::datatypes::BizID* success;

  _Adaptive_createBizAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Adaptive_biz_request_args__isset {
  _Adaptive_biz_request_args__isset() : reqData(false) {}
  bool reqData :1;
} _Adaptive_biz_request_args__isset;

class Adaptive_biz_request_args {
 public:

  Adaptive_biz_request_args(const Adaptive_biz_request_args&);
  Adaptive_biz_request_args& operator=(const Adaptive_biz_request_args&);
  Adaptive_biz_request_args() {
  }

  virtual ~Adaptive_biz_request_args() throw();
  BizAdRequest reqData;

  _Adaptive_biz_request_args__isset __isset;

  void __set_reqData(const BizAdRequest& val);

  bool operator == (const Adaptive_biz_request_args & rhs) const
  {
    if (!(reqData == rhs.reqData))
      return false;
    return true;
  }
  bool operator != (const Adaptive_biz_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_biz_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Adaptive_biz_request_pargs {
 public:


  virtual ~Adaptive_biz_request_pargs() throw();
  const BizAdRequest* reqData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_biz_request_result__isset {
  _Adaptive_biz_request_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Adaptive_biz_request_result__isset;

class Adaptive_biz_request_result {
 public:

  Adaptive_biz_request_result(const Adaptive_biz_request_result&);
  Adaptive_biz_request_result& operator=(const Adaptive_biz_request_result&);
  Adaptive_biz_request_result() {
  }

  virtual ~Adaptive_biz_request_result() throw();
  BizAdResponse success;
   ::interface::constants::error_codes::ServerException error;

  _Adaptive_biz_request_result__isset __isset;

  void __set_success(const BizAdResponse& val);

  void __set_error(const  ::interface::constants::error_codes::ServerException& val);

  bool operator == (const Adaptive_biz_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Adaptive_biz_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_biz_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Adaptive_biz_request_presult__isset {
  _Adaptive_biz_request_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Adaptive_biz_request_presult__isset;

class Adaptive_biz_request_presult {
 public:


  virtual ~Adaptive_biz_request_presult() throw();
  BizAdResponse* success;
   ::interface::constants::error_codes::ServerException error;

  _Adaptive_biz_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Adaptive_registerAdEvent_args__isset {
  _Adaptive_registerAdEvent_args__isset() : adEvent(false) {}
  bool adEvent :1;
} _Adaptive_registerAdEvent_args__isset;

class Adaptive_registerAdEvent_args {
 public:

  Adaptive_registerAdEvent_args(const Adaptive_registerAdEvent_args&);
  Adaptive_registerAdEvent_args& operator=(const Adaptive_registerAdEvent_args&);
  Adaptive_registerAdEvent_args() {
  }

  virtual ~Adaptive_registerAdEvent_args() throw();
   ::interface::ad_event::AdEvent adEvent;

  _Adaptive_registerAdEvent_args__isset __isset;

  void __set_adEvent(const  ::interface::ad_event::AdEvent& val);

  bool operator == (const Adaptive_registerAdEvent_args & rhs) const
  {
    if (!(adEvent == rhs.adEvent))
      return false;
    return true;
  }
  bool operator != (const Adaptive_registerAdEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Adaptive_registerAdEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Adaptive_registerAdEvent_pargs {
 public:


  virtual ~Adaptive_registerAdEvent_pargs() throw();
  const  ::interface::ad_event::AdEvent* adEvent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class AdaptiveClient : virtual public AdaptiveIf {
 public:
  AdaptiveClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdaptiveClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::interface::constants::datatypes::UserID createUserAccount(const  ::interface::user_data::UserAccountCreation& userData);
  void send_createUserAccount(const  ::interface::user_data::UserAccountCreation& userData);
   ::interface::constants::datatypes::UserID recv_createUserAccount();
  void user_request(UserAdResponse& _return, const UserAdRequest& reqData);
  void send_user_request(const UserAdRequest& reqData);
  void recv_user_request(UserAdResponse& _return);
   ::interface::constants::datatypes::BizID createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData);
  void send_createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData);
   ::interface::constants::datatypes::BizID recv_createBizAccount();
  void biz_request(BizAdResponse& _return, const BizAdRequest& reqData);
  void send_biz_request(const BizAdRequest& reqData);
  void recv_biz_request(BizAdResponse& _return);
  void registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent);
  void send_registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdaptiveProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<AdaptiveIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdaptiveProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createUserAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_user_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createBizAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_biz_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerAdEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdaptiveProcessor(::apache::thrift::stdcxx::shared_ptr<AdaptiveIf> iface) :
    iface_(iface) {
    processMap_["createUserAccount"] = &AdaptiveProcessor::process_createUserAccount;
    processMap_["user_request"] = &AdaptiveProcessor::process_user_request;
    processMap_["createBizAccount"] = &AdaptiveProcessor::process_createBizAccount;
    processMap_["biz_request"] = &AdaptiveProcessor::process_biz_request;
    processMap_["registerAdEvent"] = &AdaptiveProcessor::process_registerAdEvent;
  }

  virtual ~AdaptiveProcessor() {}
};

class AdaptiveProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdaptiveProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< AdaptiveIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< AdaptiveIfFactory > handlerFactory_;
};

class AdaptiveMultiface : virtual public AdaptiveIf {
 public:
  AdaptiveMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<AdaptiveIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdaptiveMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<AdaptiveIf> > ifaces_;
  AdaptiveMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<AdaptiveIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::interface::constants::datatypes::UserID createUserAccount(const  ::interface::user_data::UserAccountCreation& userData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUserAccount(userData);
    }
    return ifaces_[i]->createUserAccount(userData);
  }

  void user_request(UserAdResponse& _return, const UserAdRequest& reqData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->user_request(_return, reqData);
    }
    ifaces_[i]->user_request(_return, reqData);
    return;
  }

   ::interface::constants::datatypes::BizID createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createBizAccount(bizData);
    }
    return ifaces_[i]->createBizAccount(bizData);
  }

  void biz_request(BizAdResponse& _return, const BizAdRequest& reqData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->biz_request(_return, reqData);
    }
    ifaces_[i]->biz_request(_return, reqData);
    return;
  }

  void registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerAdEvent(adEvent);
    }
    ifaces_[i]->registerAdEvent(adEvent);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AdaptiveConcurrentClient : virtual public AdaptiveIf {
 public:
  AdaptiveConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdaptiveConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::interface::constants::datatypes::UserID createUserAccount(const  ::interface::user_data::UserAccountCreation& userData);
  int32_t send_createUserAccount(const  ::interface::user_data::UserAccountCreation& userData);
   ::interface::constants::datatypes::UserID recv_createUserAccount(const int32_t seqid);
  void user_request(UserAdResponse& _return, const UserAdRequest& reqData);
  int32_t send_user_request(const UserAdRequest& reqData);
  void recv_user_request(UserAdResponse& _return, const int32_t seqid);
   ::interface::constants::datatypes::BizID createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData);
  int32_t send_createBizAccount(const  ::interface::biz_data::BizAccountCreation& bizData);
   ::interface::constants::datatypes::BizID recv_createBizAccount(const int32_t seqid);
  void biz_request(BizAdResponse& _return, const BizAdRequest& reqData);
  int32_t send_biz_request(const BizAdRequest& reqData);
  void recv_biz_request(BizAdResponse& _return, const int32_t seqid);
  void registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent);
  void send_registerAdEvent(const  ::interface::ad_event::AdEvent& adEvent);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
