/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_data_TYPES_H
#define user_data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "datatypes_types.h"
#include "user_attributes_types.h"


namespace interface { namespace user_data {

class UserAccountCreation;

class SystemInformation;

typedef struct _UserAccountCreation__isset {
  _UserAccountCreation__isset() : name(false), age(false), gender(false) {}
  bool name :1;
  bool age :1;
  bool gender :1;
} _UserAccountCreation__isset;

class UserAccountCreation : public virtual ::apache::thrift::TBase {
 public:

  UserAccountCreation(const UserAccountCreation&);
  UserAccountCreation& operator=(const UserAccountCreation&);
  UserAccountCreation() : name(), age(0), gender(( ::interface::constants::user_attributes::Gender::type)0) {
  }

  virtual ~UserAccountCreation() throw();
  std::string name;
   ::interface::constants::datatypes::adaptive_int age;
   ::interface::constants::user_attributes::Gender::type gender;

  _UserAccountCreation__isset __isset;

  void __set_name(const std::string& val);

  void __set_age(const  ::interface::constants::datatypes::adaptive_int val);

  void __set_gender(const  ::interface::constants::user_attributes::Gender::type val);

  bool operator == (const UserAccountCreation & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const UserAccountCreation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAccountCreation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAccountCreation &a, UserAccountCreation &b);

std::ostream& operator<<(std::ostream& out, const UserAccountCreation& obj);

typedef struct _SystemInformation__isset {
  _SystemInformation__isset() : device(true) {}
  bool device :1;
} _SystemInformation__isset;

class SystemInformation : public virtual ::apache::thrift::TBase {
 public:

  SystemInformation(const SystemInformation&);
  SystemInformation& operator=(const SystemInformation&);
  SystemInformation() : device(( ::interface::constants::user_attributes::DeviceType::type)0) {
    device = ( ::interface::constants::user_attributes::DeviceType::type)0;

  }

  virtual ~SystemInformation() throw();
   ::interface::constants::user_attributes::DeviceType::type device;

  _SystemInformation__isset __isset;

  void __set_device(const  ::interface::constants::user_attributes::DeviceType::type val);

  bool operator == (const SystemInformation & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const SystemInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SystemInformation &a, SystemInformation &b);

std::ostream& operator<<(std::ostream& out, const SystemInformation& obj);

}} // namespace

#endif
