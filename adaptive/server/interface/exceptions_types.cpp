/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "exceptions_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interface { namespace constants { namespace error_codes {

int _kErrorCodeValues[] = {
  ErrorCode::UNKNOWN
};
const char* _kErrorCodeNames[] = {
  "UNKNOWN"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _ErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


ServerException::~ServerException() throw() {
}


void ServerException::__set_error_code(const ErrorCode::type val) {
  this->error_code = val;
}

void ServerException::__set_error_description(const std::string& val) {
  this->error_description = val;
}
std::ostream& operator<<(std::ostream& out, const ServerException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServerException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->error_code = (ErrorCode::type)ecast0;
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_description);
          this->__isset.error_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerException &a, ServerException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_description, b.error_description);
  swap(a.__isset, b.__isset);
}

ServerException::ServerException(const ServerException& other1) : TException() {
  error_code = other1.error_code;
  error_description = other1.error_description;
  __isset = other1.__isset;
}
ServerException& ServerException::operator=(const ServerException& other2) {
  error_code = other2.error_code;
  error_description = other2.error_description;
  __isset = other2.__isset;
  return *this;
}
void ServerException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerException(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_description=" << to_string(error_description);
  out << ")";
}

const char* ServerException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ServerException";
  }
}

}}} // namespace
