/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef exceptions_TYPES_H
#define exceptions_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace interface { namespace constants { namespace error_codes {

struct ErrorCode {
  enum type {
    UNKNOWN = 0
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

class ServerException;

typedef struct _ServerException__isset {
  _ServerException__isset() : error_code(false), error_description(false) {}
  bool error_code :1;
  bool error_description :1;
} _ServerException__isset;

class ServerException : public ::apache::thrift::TException {
 public:

  ServerException(const ServerException&);
  ServerException& operator=(const ServerException&);
  ServerException() : error_code((ErrorCode::type)0), error_description() {
  }

  virtual ~ServerException() throw();
  ErrorCode::type error_code;
  std::string error_description;

  _ServerException__isset __isset;

  void __set_error_code(const ErrorCode::type val);

  void __set_error_description(const std::string& val);

  bool operator == (const ServerException & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_description == rhs.error_description))
      return false;
    return true;
  }
  bool operator != (const ServerException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ServerException &a, ServerException &b);

std::ostream& operator<<(std::ostream& out, const ServerException& obj);

}}} // namespace

#endif
