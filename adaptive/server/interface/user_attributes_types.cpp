/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_attributes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interface { namespace constants { namespace user_attributes {

int _kGenderValues[] = {
  Gender::UNKNOWN,
  Gender::MALE,
  Gender::FEMALE,
  Gender::OTHER
};
const char* _kGenderNames[] = {
  "UNKNOWN",
  "MALE",
  "FEMALE",
  "OTHER"
};
const std::map<int, const char*> _Gender_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGenderValues, _kGenderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Gender::type& val) {
  std::map<int, const char*>::const_iterator it = _Gender_VALUES_TO_NAMES.find(val);
  if (it != _Gender_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDeviceTypeValues[] = {
  DeviceType::UNKNOWN,
  DeviceType::COMPUTER,
  DeviceType::MOBILE
};
const char* _kDeviceTypeNames[] = {
  "UNKNOWN",
  "COMPUTER",
  "MOBILE"
};
const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDeviceTypeValues, _kDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DeviceType::type& val) {
  std::map<int, const char*>::const_iterator it = _DeviceType_VALUES_TO_NAMES.find(val);
  if (it != _DeviceType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

}}} // namespace
