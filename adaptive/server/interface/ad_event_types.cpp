/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ad_event_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interface { namespace ad_event {

int _kAdEventTypeValues[] = {
  AdEventType::UNKNOWN,
  AdEventType::IMPRESSION,
  AdEventType::CLICK
};
const char* _kAdEventTypeNames[] = {
  "UNKNOWN",
  "IMPRESSION",
  "CLICK"
};
const std::map<int, const char*> _AdEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kAdEventTypeValues, _kAdEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AdEventType::type& val) {
  std::map<int, const char*>::const_iterator it = _AdEventType_VALUES_TO_NAMES.find(val);
  if (it != _AdEventType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


AdEvent::~AdEvent() throw() {
}


void AdEvent::__set_timestamp(const  ::interface::constants::datatypes::Timestamp val) {
  this->timestamp = val;
}

void AdEvent::__set_uid(const  ::interface::constants::datatypes::UserID val) {
  this->uid = val;
}

void AdEvent::__set_adid(const  ::interface::constants::datatypes::AdID val) {
  this->adid = val;
}

void AdEvent::__set_adReqId(const  ::interface::constants::datatypes::AdReqID val) {
  this->adReqId = val;
}

void AdEvent::__set_eventType(const AdEventType::type val) {
  this->eventType = val;
}
std::ostream& operator<<(std::ostream& out, const AdEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AdEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adid);
          this->__isset.adid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adReqId);
          this->__isset.adReqId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->eventType = (AdEventType::type)ecast0;
          this->__isset.eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdEvent");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adid", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->adid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adReqId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->adReqId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->eventType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdEvent &a, AdEvent &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.uid, b.uid);
  swap(a.adid, b.adid);
  swap(a.adReqId, b.adReqId);
  swap(a.eventType, b.eventType);
  swap(a.__isset, b.__isset);
}

AdEvent::AdEvent(const AdEvent& other1) {
  timestamp = other1.timestamp;
  uid = other1.uid;
  adid = other1.adid;
  adReqId = other1.adReqId;
  eventType = other1.eventType;
  __isset = other1.__isset;
}
AdEvent& AdEvent::operator=(const AdEvent& other2) {
  timestamp = other2.timestamp;
  uid = other2.uid;
  adid = other2.adid;
  adReqId = other2.adReqId;
  eventType = other2.eventType;
  __isset = other2.__isset;
  return *this;
}
void AdEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdEvent(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "uid=" << to_string(uid);
  out << ", " << "adid=" << to_string(adid);
  out << ", " << "adReqId=" << to_string(adReqId);
  out << ", " << "eventType=" << to_string(eventType);
  out << ")";
}

}} // namespace
