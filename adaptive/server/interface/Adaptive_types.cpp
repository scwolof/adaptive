/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Adaptive_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace interface { namespace adaptive {


UserAdRequest::~UserAdRequest() throw() {
}


void UserAdRequest::__set_uid(const  ::interface::constants::datatypes::UserID val) {
  this->uid = val;
}

void UserAdRequest::__set_sysinfo(const  ::interface::user_data::SystemInformation& val) {
  this->sysinfo = val;
}
std::ostream& operator<<(std::ostream& out, const UserAdRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserAdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sysinfo.read(iprot);
          this->__isset.sysinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserAdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserAdRequest");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sysinfo", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sysinfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserAdRequest &a, UserAdRequest &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.sysinfo, b.sysinfo);
  swap(a.__isset, b.__isset);
}

UserAdRequest::UserAdRequest(const UserAdRequest& other0) {
  uid = other0.uid;
  sysinfo = other0.sysinfo;
  __isset = other0.__isset;
}
UserAdRequest& UserAdRequest::operator=(const UserAdRequest& other1) {
  uid = other1.uid;
  sysinfo = other1.sysinfo;
  __isset = other1.__isset;
  return *this;
}
void UserAdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserAdRequest(";
  out << "uid=" << to_string(uid);
  out << ", " << "sysinfo=" << to_string(sysinfo);
  out << ")";
}


UserAdResponse::~UserAdResponse() throw() {
}


void UserAdResponse::__set_timestamp(const  ::interface::constants::datatypes::Timestamp val) {
  this->timestamp = val;
}

void UserAdResponse::__set_adReqId(const  ::interface::constants::datatypes::AdReqID val) {
  this->adReqId = val;
}

void UserAdResponse::__set_adids(const std::map< ::interface::constants::datatypes::AdPosition,  ::interface::constants::datatypes::AdID> & val) {
  this->adids = val;
}
std::ostream& operator<<(std::ostream& out, const UserAdResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserAdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adReqId);
          this->__isset.adReqId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->adids.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
               ::interface::constants::datatypes::AdPosition _key7;
              xfer += iprot->readI32(_key7);
               ::interface::constants::datatypes::AdID& _val8 = this->adids[_key7];
              xfer += iprot->readI32(_val8);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.adids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserAdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserAdResponse");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adReqId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->adReqId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adids", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->adids.size()));
    std::map< ::interface::constants::datatypes::AdPosition,  ::interface::constants::datatypes::AdID> ::const_iterator _iter9;
    for (_iter9 = this->adids.begin(); _iter9 != this->adids.end(); ++_iter9)
    {
      xfer += oprot->writeI32(_iter9->first);
      xfer += oprot->writeI32(_iter9->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserAdResponse &a, UserAdResponse &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.adReqId, b.adReqId);
  swap(a.adids, b.adids);
  swap(a.__isset, b.__isset);
}

UserAdResponse::UserAdResponse(const UserAdResponse& other10) {
  timestamp = other10.timestamp;
  adReqId = other10.adReqId;
  adids = other10.adids;
  __isset = other10.__isset;
}
UserAdResponse& UserAdResponse::operator=(const UserAdResponse& other11) {
  timestamp = other11.timestamp;
  adReqId = other11.adReqId;
  adids = other11.adids;
  __isset = other11.__isset;
  return *this;
}
void UserAdResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserAdResponse(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "adReqId=" << to_string(adReqId);
  out << ", " << "adids=" << to_string(adids);
  out << ")";
}


BizAdRequest::~BizAdRequest() throw() {
}


void BizAdRequest::__set_bizid(const  ::interface::constants::datatypes::BizID val) {
  this->bizid = val;
}

void BizAdRequest::__set_ad_info(const  ::interface::ad_data::AdCreation& val) {
  this->ad_info = val;
}

void BizAdRequest::__set_daily_budget(const double val) {
  this->daily_budget = val;
}

void BizAdRequest::__set_lifetime_days(const  ::interface::constants::datatypes::adaptive_int val) {
  this->lifetime_days = val;
}
std::ostream& operator<<(std::ostream& out, const BizAdRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BizAdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bizid);
          this->__isset.bizid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ad_info.read(iprot);
          this->__isset.ad_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->daily_budget);
          this->__isset.daily_budget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lifetime_days);
          this->__isset.lifetime_days = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BizAdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BizAdRequest");

  xfer += oprot->writeFieldBegin("bizid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->bizid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ad_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ad_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("daily_budget", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->daily_budget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lifetime_days", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->lifetime_days);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BizAdRequest &a, BizAdRequest &b) {
  using ::std::swap;
  swap(a.bizid, b.bizid);
  swap(a.ad_info, b.ad_info);
  swap(a.daily_budget, b.daily_budget);
  swap(a.lifetime_days, b.lifetime_days);
  swap(a.__isset, b.__isset);
}

BizAdRequest::BizAdRequest(const BizAdRequest& other12) {
  bizid = other12.bizid;
  ad_info = other12.ad_info;
  daily_budget = other12.daily_budget;
  lifetime_days = other12.lifetime_days;
  __isset = other12.__isset;
}
BizAdRequest& BizAdRequest::operator=(const BizAdRequest& other13) {
  bizid = other13.bizid;
  ad_info = other13.ad_info;
  daily_budget = other13.daily_budget;
  lifetime_days = other13.lifetime_days;
  __isset = other13.__isset;
  return *this;
}
void BizAdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BizAdRequest(";
  out << "bizid=" << to_string(bizid);
  out << ", " << "ad_info=" << to_string(ad_info);
  out << ", " << "daily_budget=" << to_string(daily_budget);
  out << ", " << "lifetime_days=" << to_string(lifetime_days);
  out << ")";
}


BizAdResponse::~BizAdResponse() throw() {
}


void BizAdResponse::__set_timestamp(const  ::interface::constants::datatypes::Timestamp val) {
  this->timestamp = val;
}

void BizAdResponse::__set_adid(const  ::interface::constants::datatypes::AdID val) {
  this->adid = val;
}
std::ostream& operator<<(std::ostream& out, const BizAdResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BizAdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->adid);
          this->__isset.adid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BizAdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BizAdResponse");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->adid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BizAdResponse &a, BizAdResponse &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.adid, b.adid);
  swap(a.__isset, b.__isset);
}

BizAdResponse::BizAdResponse(const BizAdResponse& other14) {
  timestamp = other14.timestamp;
  adid = other14.adid;
  __isset = other14.__isset;
}
BizAdResponse& BizAdResponse::operator=(const BizAdResponse& other15) {
  timestamp = other15.timestamp;
  adid = other15.adid;
  __isset = other15.__isset;
  return *this;
}
void BizAdResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BizAdResponse(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "adid=" << to_string(adid);
  out << ")";
}

}} // namespace
